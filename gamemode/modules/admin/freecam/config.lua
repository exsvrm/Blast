local _internal_camera = nil local _internal_isFrozen = false local _internal_pos = nil local _internal_rot = nil local _internal_fov = nil local _internal_vecX = nil local _internal_vecY = nil local _internal_vecZ = nil function GetInitialCameraPosition() if _G.CAMERA_SETTINGS.KEEP_POSITION and _internal_pos then return _internal_pos end  return GetGameplayCamCoord() end function GetInitialCameraRotation() if _G.CAMERA_SETTINGS.KEEP_ROTATION and _internal_rot then return _internal_rot end local rot = GetGameplayCamRot() return vec3(rot.x, 0.0, rot.z)end function IsFreecamFrozen() return _internal_isFrozen end function SetFreecamFrozen(frozen) local frozen = frozen == true _internal_isFrozen = frozen end function GetFreecamPosition() return _internal_pos end function SetFreecamPosition(x, y, z) local pos = vec3(x, y, z) local int = GetInteriorAtCoords(pos) LoadInterior(int) SetFocusArea(pos) LockMinimapPosition(x, y) SetCamCoord(_internal_camera, pos) _internal_pos = pos end function GetFreecamRotation() return _internal_rot end function SetFreecamRotation(x, y, z) local rotX, rotY, rotZ = ClampCameraRotation(x, y, z) local vecX, vecY, vecZ = EulerToMatrix(rotX, rotY, rotZ) local rot = vec3(rotX, rotY, rotZ) LockMinimapAngle(math.floor(rotZ)) SetCamRot(_internal_camera, rot) _internal_rot  = rot _internal_vecX = vecX _internal_vecY = vecY _internal_vecZ = vecZ end function GetFreecamFov() return _internal_fov end function SetFreecamFov(fov) local fov = Clamp(fov, 0.0, 90.0) SetCamFov(_internal_camera, fov) _internal_fov = fov end function GetFreecamMatrix() return _internal_vecX, _internal_vecY, _internal_vecZ, _internal_pos end function GetFreecamTarget(distance) local target = _internal_pos + (_internal_vecY * distance) return target end function IsFreecamActive() return IsCamActive(_internal_camera) == 1 end function SetFreecamActive(active) if active == IsFreecamActive() then return end local enableEasing = _G.CAMERA_SETTINGS.ENABLE_EASING local easingDuration = _G.CAMERA_SETTINGS.EASING_DURATION local disabledControls = {176, 24, 30, 31, 32, 33, 34, 35} if active then local pos = GetInitialCameraPosition() local rot = GetInitialCameraRotation() _internal_camera = CreateCam("DEFAULT_SCRIPTED_CAMERA", true) SetFreecamFov(_G.CAMERA_SETTINGS.FOV) SetFreecamPosition(pos.x, pos.y, pos.z) SetFreecamRotation(rot.x, rot.y, rot.z) Citizen.CreateThread(function() while true do for _,v in pairs(disabledControls) do DisableControlAction(0, v, true) end Citizen.Wait(2) end end) else DestroyCam(_internal_camera) ClearFocus() UnlockMinimapPosition() UnlockMinimapAngle() Citizen.CreateThread(function() while true do for _,v in pairs(disabledControls) do EnableControlAction(0, v, true) end Citizen.Wait(2) end end) end RenderScriptCams(active, enableEasing, easingDuration) end
function table.copy(x) local copy = {} for k, v in pairs(x) do if type(v) == 'table' then copy[k] = table.copy(v) else copy[k] = v end end return copy end function protect(t) local fn = function (_, k) error('Key `' .. tostring(k) .. '` is not supported.') end return setmetatable(t, { __index = fn, __newindex = fn }) end function CreateGamepadMetatable(keyboard, gamepad) return setmetatable({}, { __index = function (t, k) local src = IsGamepadControl() and gamepad or keyboard return src[k] end }) end function Clamp(x, min, max) return math.min(math.max(x, min), max) end function ClampCameraRotation(rotX, rotY, rotZ) local x = Clamp(rotX, -90.0, 90.0) local y = rotY % 360 local z = rotZ % 360 return x, y, z end function IsGamepadControl() return not IsInputDisabled(2) end function GetSmartControlNormal(control) if type(control) == 'table' then local normal1 = GetDisabledControlNormal(0, control[1]) local normal2 = GetDisabledControlNormal(0, control[2]) return normal1 - normal2 end return GetDisabledControlNormal(0, control) end function EulerToMatrix(rotX, rotY, rotZ) local radX = math.rad(rotX) local radY = math.rad(rotY) local radZ = math.rad(rotZ) local sinX = math.sin(radX) local sinY = math.sin(radY) local sinZ = math.sin(radZ) local cosX = math.cos(radX) local cosY = math.cos(radY) local cosZ = math.cos(radZ) local vecX = {} local vecY = {} local vecZ = {} vecX.x = cosY * cosZ vecX.y = cosY * sinZ vecX.z = -sinY vecY.x = cosZ * sinX * sinY - cosX * sinZ vecY.y = cosX * cosZ - sinX * sinY * sinZ vecY.z = cosY * sinX vecZ.x = -cosX * cosZ * sinY + sinX * sinZ vecZ.y = -cosZ * sinX + cosX * sinY * sinZ vecZ.z = cosX * cosY vecX = vec3(vecX.x, vecX.y, vecX.z) vecY = vec3(vecY.x, vecY.y, vecY.z) vecZ = vec3(vecZ.x, vecZ.y, vecZ.z) return vecX, vecY, vecZ end
local function GetSpeedMultiplier() local fastNormal = GetSmartControlNormal(21) local slowNormal = GetSmartControlNormal(19) local baseSpeed = 1 local fastSpeed = 1 + ((10 - 1) * fastNormal) local slowSpeed = 1 + ((10 - 1) * slowNormal) local frameMultiplier = GetFrameTime() * 60 local speedMultiplier = baseSpeed * fastSpeed / slowSpeed return speedMultiplier * frameMultiplier end local function UpdateCamera() if not IsFreecamActive() or IsPauseMenuActive() then return end if not IsFreecamFrozen() then local vecX, vecY = GetFreecamMatrix() local vecZ = vec3(0, 0, 1) local pos = GetFreecamPosition() local rot = GetFreecamRotation() local speedMultiplier = GetSpeedMultiplier() local lookX = GetSmartControlNormal(1) local lookY = GetSmartControlNormal(2) local moveX = GetSmartControlNormal(30) local moveY = GetSmartControlNormal(31) local moveZ = GetSmartControlNormal(152) local rotX = rot.x + (-lookY * 5) local rotZ = rot.z + (-lookX * 5) local rotY = rot.y pos = pos + (vecX *  moveX * speedMultiplier) pos = pos + (vecY * -moveY * speedMultiplier) pos = pos + (vecZ *  moveZ * speedMultiplier) rot = vec3(rotX, rotY, rotZ) SetFreecamPosition(pos.x, pos.y, pos.z) SetFreecamRotation(rot.x, rot.y, rot.z) end end Citizen.CreateThread(function () while true do Citizen.Wait(0) UpdateCamera() end end)

local BASE_CAMERA_SETTINGS = protect({
    FOV = 90.0,
    ENABLE_EASING = true,
    EASING_DURATION = 0,
    KEEP_POSITION = false,
    KEEP_ROTATION = false
})


_G.CAMERA_SETTINGS = table.copy(BASE_CAMERA_SETTINGS)
protect(_G.CAMERA_SETTINGS)